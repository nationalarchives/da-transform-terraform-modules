{
    "Comment": "State machine for the TE to process the BagIt package",
    "StartAt": "Choice",
    "States": {
      "Choice": {
        "Type": "Choice",
        "Choices": [
            {
            "Variable": "$.eventSourceARN",
            "StringMatches": "${tdr_trigger_queue_arn}",
            "Next": "TDRMessage"
            },
            {
            "Variable": "$.eventSourceARN",
            "StringMatches": "${editorial_retry_trigger_arn}",
            "Next": "EditorialRetryMessage"
            }
        ]
      },
      "TDRMessage": {
        "Type": "Pass",
        "Next": "BagIt checksum validation",
        "Parameters": {
            "body.$": "States.StringToJson($.body)"
        }
      },
      "BagIt checksum validation": {
        "Type": "Task",
        "Resource": "${bagit_checksum_lambda}",
        "Next": "Bagit validation error?",
        "Retry": [
          {
            "ErrorEquals": [
              "States.TaskFailed"
            ],
            "BackoffRate": 2,
            "IntervalSeconds": 1,
            "MaxAttempts": 3
          }
        ],
        "InputPath": "$.body"
      },
      "Files checksum validation": {
        "Type": "Task",
        "Resource": "${files_checksum_lambda}",
        "Next": "Files validation errors?",
        "Retry": [
          {
            "ErrorEquals": [
              "States.TaskFailed"
            ],
            "BackoffRate": 2,
            "IntervalSeconds": 1,
            "MaxAttempts": 3
          }
        ]
      },

      "Prepare Parser Input": {
        "Type": "Task",
        "Resource": "${prepare_parser_input}",
        "Next": "Parser Input Check",
        "Retry": [
          {
            "ErrorEquals": [
              "States.TaskFailed"
            ],
            "BackoffRate": 2,
            "IntervalSeconds": 1,
            "MaxAttempts": 3
          }
        ]
      },
      "Parser Input Check": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.error",
          "BooleanEquals": false,
          "Next": "Parallel"
        }
      ],
      "Default": "Prepare Parser Input Failed"
    },

    "Parallel": {
      "Type": "Parallel",
      "Next": "EditorialIntegration",
      "Branches": [
        {
          "StartAt": "Create Parser Input",
          "States": {
            "Create Parser Input": {
              "Type": "Pass",
              "Next": "RunJudgmentParser",
              "Parameters": {
                "parser-inputs.$": "$.parser-inputs"
              }
            },
            "RunJudgmentParser": {
              "Type": "Task",
              "Resource": "${run_judgments_parser}",
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.TaskFailed"
                  ],
                  "BackoffRate": 1,
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3
                }
              ],
              "Next": "Check Parser Result"
            },
            "Check Parser Result": {
              "Type": "Choice",
              "Choices": [
                {
                  "Not": {
                    "Variable": "$.parser-outputs.error-messages[0]",
                    "IsPresent": true
                  },
                  "Next": "Parser OK"
                }
              ],
              "Default": "Parser Error"
            },
            "Parser OK": {
              "Type": "Pass",
              "End": true
            },
            "Parser Error": {
              "Type": "Fail"
            }
          }
        },
        {
          "StartAt": "Pass Context",
          "States": {
            "Pass Context": {
              "Type": "Pass",
              "End": true
            }
          }
        }
      ]
    },
    "Prepare Parser Input Failed": {
      "Type": "Fail"
    },
      
      "EditorialIntegration": {
        "Type": "Task",
        "Resource": "${editorial_integration_lambda}",
        "Next": "Editorial SNS Publish",
        "Retry": [
          {
            "ErrorEquals": [
              "States.TaskFailed"
            ],
            "BackoffRate": 2,
            "IntervalSeconds": 1,
            "MaxAttempts": 3
          }
        ]
      },
      "Editorial SNS Publish": {
        "Type": "Task",
        "Resource": "arn:aws:states:::sns:publish",
        "Parameters": {
          "Message.$": "$",
          "TopicArn": "${editorial_sns_topic_arn}"
        },
        "End": true,
        "InputPath": "$.editorial-output"
    },
      "Bagit validation error?": {
        "Type": "Choice",
        "Choices": [
          {
            "And": [
              {
                "Variable": "$.error",
                "BooleanEquals": true
              },
              {
                "Variable": "$.output-message.number-of-retries",
                "NumericLessThan": 3
              }
            ],
            "Next": "SendMessage to TDR for BagIt"
          },
          {
            "And": [
              {
                "Variable": "$.error",
                "BooleanEquals": false
              },
              {
                "Variable": "$.output-message.number-of-retries",
                "NumericLessThan": 3
              }
            ],
            "Next": "Files checksum validation"
          }
        ],
        "Default": "BagIt checksum failed"
      },
      "SendMessage to TDR for BagIt": {
        "Type": "Task",
        "Resource": "arn:aws:states:::sqs:sendMessage",
        "Parameters": {
          "MessageBody.$": "$",
          "QueueUrl": "${tdr_sqs_queue_endpoint}"
        },
        "End": true,
        "InputPath": "$.output-message"
      },
      "Files validation errors?": {
        "Type": "Choice",
        "Choices": [
          {
            "And": [
              {
                "Variable": "$.error",
                "BooleanEquals": true
              },
              {
                "Variable": "$.output-message.number-of-retries",
                "NumericLessThan": 3
              }
            ],
            "Next": "SendMessage to TDR for files"
          },
          {
            "And": [
              {
                "Variable": "$.error",
                "BooleanEquals": false
              },
              {
                "Variable": "$.output-message.number-of-retries",
                "NumericLessThan": 3
              }
            ],
            "Next": "Prepare Parser Input"
          }
        ],
        "Default": "Files checksum failed"
      },
      "EditorialRetryMessage": {
        "Type": "Pass",
        "Next": "EditorialIntegration",
        "Parameters": {
          "body.$": "States.StringToJson($.body)"
        },
        "OutputPath": "$.body"
      },
      "SendMessage to TDR for files": {
        "Type": "Task",
        "Resource": "arn:aws:states:::sqs:sendMessage",
        "Parameters": {
          "MessageBody.$": "$",
          "QueueUrl": "${tdr_sqs_queue_endpoint}"
        },
        "End": true,
        "InputPath": "$.output-message"
      },
      "BagIt checksum failed": {
        "Type": "Fail"
      },
      "Files checksum failed": {
        "Type": "Fail"
      }
    }
  }