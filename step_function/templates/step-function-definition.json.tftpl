{
  "Comment": "State machine for the TE to process the BagIt package",
  "StartAt": "Choice",
  "States": {
    "Choice": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.eventSourceARN",
          "StringMatches": "${tdr_trigger_queue_arn}",
          "Next": "TDRMessage"
        },
        {
          "Variable": "$.eventSourceARN",
          "StringMatches": "${editorial_retry_trigger_arn}",
          "Next": "EditorialRetryMessage"
        }
      ]
    },
    "TDRMessage": {
      "Type": "Pass",
      "Next": "BagIt checksum validation",
      "Parameters": {
        "body.$": "States.StringToJson($.body)"
      }
    },
    "BagIt checksum validation": {
      "Type": "Task",
      "Resource": "${bagit_checksum_lambda}",
      "Next": "Bagit validation error?",
      "Retry": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "BackoffRate": 1,
          "IntervalSeconds": 1,
          "MaxAttempts": 3
        }
      ],
      "InputPath": "$.body",
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "Next": "Bagit Checksum Function Error"
        }
      ]
    },
    "Bagit Checksum Function Error": {
      "Type": "Pass",
      "Next": "Bagit Checksum Error Slack Alerts",
      "Parameters": {
        "Execution.$": "$$.Execution.Name",
        "Error.$": "$.Error",
        "ErrorMessage.$": "$.Cause"
      }
    },
    "Files checksum validation": {
      "Type": "Task",
      "Resource": "${files_checksum_lambda}",
      "Next": "Files validation errors?",
      "Retry": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "BackoffRate": 1,
          "IntervalSeconds": 1,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "Next": "Files Checksum Function Error"
        }
      ]
    },
    "Files Checksum Function Error": {
      "Type": "Pass",
      "Next": "File Checksum Error Slack Alerts",
      "Parameters": {
        "Execution.$": "$$.Execution.Name",
        "Error.$": "$.Error",
        "ErrorMessage.$": "$.Cause"
      }
    },
    "Prepare Parser Input": {
      "Type": "Task",
      "Resource": "${prepare_parser_input}",
      "Next": "Parser Input Check",
      "Retry": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "BackoffRate": 1,
          "IntervalSeconds": 1,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "Next": "Parser Input Function Error"
        }
      ]
    },
    "Parser Input Function Error": {
      "Type": "Pass",
      "Next": "Parser Input Error Slack Alerts",
      "Parameters": {
        "Execution.$": "$$.Execution.Name",
        "Error.$": "$.Error",
        "ErrorMessage.$": "$.Cause"
      }
    },
    "Parser Input Check": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.error",
          "BooleanEquals": false,
          "Next": "Parallel"
        }
      ],
      "Default": "Parser Input error"
    },
    "Parser Input error": {
      "Type": "Pass",
      "Next": "Parser Input Error Slack Alerts",
      "Parameters": {
        "Execution.$": "$$.Execution.Name",
        "ErrorMessage.$": "$.error-message"
      }
    },
    "Parser Input Error Slack Alerts": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message.$": "$",
        "TopicArn": "${editorial_sns_topic_arn}"
      },
      "Next": "Prepare Parser Input Failed"
    },
    "Parallel": {
      "Type": "Parallel",
      "Next": "EditorialIntegration",
      "Branches": [
        {
          "StartAt": "Create Parser Input",
          "States": {
            "Create Parser Input": {
              "Type": "Pass",
              "Next": "RunJudgmentParser",
              "Parameters": {
                "parser-inputs.$": "$.parser-inputs"
              }
            },
            "RunJudgmentParser": {
              "Type": "Task",
              "Resource": "${run_judgments_parser}",
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.TaskFailed"
                  ],
                  "BackoffRate": 1,
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3
                }
              ],
              "Next": "Check Parser Result",
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.TaskFailed"
                  ],
                  "Next": "Judgment Parser Function Error"
                }
              ]
            },
            "Judgment Parser Function Error": {
              "Type": "Pass",
              "Next": "Parser Error Slack Alerts",
              "Parameters": {
                "Execution.$": "$$.Execution.Name",
                "Error.$": "$.Error",
                "ErrorMessage.$": "$.Cause"
              }
            },
            "Check Parser Result": {
              "Type": "Choice",
              "Choices": [
                {
                  "Not": {
                    "Variable": "$.parser-outputs.error-messages[0]",
                    "IsPresent": true
                  },
                  "Next": "Parser OK"
                }
              ],
              "Default": "Parser Error"
            },
            "Parser Error": {
              "Type": "Pass",
              "Next": "Parser Error Slack Alerts",
              "Parameters": {
                "Execution.$": "$$.Execution.Name",
                "ErrorMessage.$": "$.error-message"
              }
            },
            "Parser Error Slack Alerts": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sns:publish",
              "Parameters": {
                "Message.$": "$",
                "TopicArn": "${tre-slack-alerts-sns}"
              },
              "Next": "Parser Failed"
            },
            "Parser OK": {
              "Type": "Pass",
              "End": true
            },
            "Parser Failed": {
              "Type": "Fail"
            }
          }
        },
        {
          "StartAt": "Pass Context",
          "States": {
            "Pass Context": {
              "Type": "Pass",
              "End": true
            }
          }
        }
      ]
    },
    "Prepare Parser Input Failed": {
      "Type": "Fail"
    },
    "Editorial Integration Failed": {
      "Type": "Fail"
    },
    "EditorialIntegration": {
      "Type": "Task",
      "Resource": "${editorial_integration_lambda}",
      "Next": "Editorial SNS Publish",
      "Retry": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "BackoffRate": 1,
          "IntervalSeconds": 1,
          "MaxAttempts": 3
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "Next": "Editorial Integration Function Error"
        }
      ]
    },
    "Editorial Integration Function Error": {
      "Type": "Pass",
      "Next": "Editorial Integration Error Slack Alerts (1)",
      "Parameters": {
        "Execution.$": "$$.Execution.Name",
        "Error.$": "$.Error",
        "ErrorMessage.$": "$.Cause"
      }
    },
    "Editorial Integration Error Slack Alerts (1)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message.$": "$",
        "TopicArn": "${tre-slack-alerts-sns}"
      },
      "Next": "Editorial Integration Failed"
    },
    "Editorial SNS Publish": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message.$": "$",
        "TopicArn": "${editorial_sns_topic_arn}"
      },
      "End": true,
      "InputPath": "$.editorial-output"
    },
    "Bagit validation error?": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.error",
              "BooleanEquals": true
            },
            {
              "Variable": "$.output-message.number-of-retries",
              "NumericLessThan": 3
            }
          ],
          "Next": "SendMessage to TDR for BagIt"
        },
        {
          "And": [
            {
              "Variable": "$.error",
              "BooleanEquals": false
            },
            {
              "Variable": "$.output-message.number-of-retries",
              "NumericLessThan": 3
            }
          ],
          "Next": "Files checksum validation"
        }
      ],
      "Default": "Bagit Checksum Error"
    },
    "Bagit Checksum Error": {
      "Type": "Pass",
      "Next": "Bagit Checksum Error Slack Alerts",
      "Parameters": {
        "Execution.$": "$$.Execution.Name",
        "ErrorMessage.$": "$.error-message"
      }
    },
    "Bagit Checksum Error Slack Alerts": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message.$": "$",
        "TopicArn": "${tre-slack-alerts-sns}"
      },
      "Next": "BagIt checksum failed"
    },
    "SendMessage to TDR for BagIt": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage",
      "Parameters": {
        "MessageBody.$": "$",
        "QueueUrl": "${tdr_sqs_queue_endpoint}"
      },
      "End": true,
      "InputPath": "$.output-message"
    },
    "Files validation errors?": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.error",
              "BooleanEquals": true
            },
            {
              "Variable": "$.output-message.number-of-retries",
              "NumericLessThan": 3
            }
          ],
          "Next": "SendMessage to TDR for files"
        },
        {
          "And": [
            {
              "Variable": "$.error",
              "BooleanEquals": false
            },
            {
              "Variable": "$.output-message.number-of-retries",
              "NumericLessThan": 3
            }
          ],
          "Next": "Prepare Parser Input"
        }
      ],
      "Default": "Files Checksum Error"
    },
    "Files Checksum Error": {
      "Type": "Pass",
      "Next": "File Checksum Error Slack Alerts",
      "Parameters": {
        "Execution.$": "$$.Execution.Name",
        "ErrorMessage.$": "$.error-message"
      }
    },
    "File Checksum Error Slack Alerts": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message.$": "$",
        "TopicArn": "${tre-slack-alerts-sns}"
      },
      "Next": "Files checksum failed"
    },
    "EditorialRetryMessage": {
      "Type": "Pass",
      "Next": "EditorialIntegration",
      "Parameters": {
        "body.$": "States.StringToJson($.body)"
      },
      "OutputPath": "$.body"
    },
    "SendMessage to TDR for files": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage",
      "Parameters": {
        "MessageBody.$": "$",
        "QueueUrl": "${tdr_sqs_queue_endpoint}"
      },
      "End": true,
      "InputPath": "$.output-message"
    },
    "BagIt checksum failed": {
      "Type": "Fail"
    },
    "Files checksum failed": {
      "Type": "Fail"
    }
  }
}